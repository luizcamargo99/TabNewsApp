@page "/"
@inherits BasePage

<TopMenu Title="Relevantes" />

@if (IsLoading)
{
    <Loading />
}
else if (_contents is not null)
{
    <InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="(x) => GetContentsAsync()">
        <div class="main">
            @for (int i = 0; i < _contents.Count; i++)
                <ContentPreview ContentObj="@_contents[i]" Order="@(i + 1)" RealNow="@_realNow" />

            @if (httpService.IsLoading)
                <span>LOADING</span>

                <span id="observerTarget" style="display: @(httpService.IsLoading ? "none" : "flex");"></span>
            </div>
        </InfiniteScroll>


}

@code {
    [Inject]
    private IContentService _contentService { get; set; }

    private List<Content> _contents { get; set; } = new List<Content>();
    private DateTime _realNow { get; set; }
    private int _currentPage = 0;

    protected override async Task OnInitializedAsync()
    {
        _realNow = tabDateService.RealNow;
        await GetContentsAsync();
    }

    private async Task GetContentsAsync()
    {
        _currentPage += 1;

        if (httpService.IsLoading)
            return;

        var contents = await _contentService.GetAll(_currentPage, 30, EStrategy.Relevant);
        _contents.AddRange(contents);
    }
}